package io.txture.hornoxbson.test.cases

import org.junit.jupiter.api.Test
import io.txture.hornoxbson.BsonDeserializer
import io.txture.hornoxbson.BsonSerializer
import io.txture.hornoxbson.ByteExtensions.hex
import io.txture.hornoxbson.model.DocumentNode
import io.txture.hornoxbson.model.DoubleNode
import io.txture.hornoxbson.model.Int32Node
import io.txture.hornoxbson.model.TextNode
import org.junit.jupiter.api.Tag
import strikt.api.expectThat
import strikt.assertions.containsExactly
import strikt.assertions.isA
import strikt.assertions.isEqualTo
import java.util.*

@Tag("UnitTest")
class BasicMultiFeatureTest {

    companion object {
        // bson generated by Jackson+BSON.
        val exampleBson = HexFormat.of().parseHex(
            "85000000026e616d650004000000666f" +
                "6f0010736f6d65496e74000300000001" +
                "736f6d65466c6f617400666666666626" +
                "454004736f6d654172726179001b0000" +
                "0002300004000000666f6f0002310004" +
                "000000626172000003736f6d654e6573" +
                "7465640020000000026e616d65000400" +
                "0000666f6f0010736f6d65496e740003" +
                "0000000000"
        )
    }

    @Test
    fun testBasicSerializationAndDeserialization() {
        val node = BsonDeserializer.deserializeBsonDocument(exampleBson)
        expectThat(node) {
            isA<DocumentNode>().and {
                get { this.getString("name") }.isEqualTo("foo")
                get { this.getInt("someInt") }.isEqualTo(3)
                get { this.getJsonNumber("someFloat").doubleValue() }.isEqualTo(42.3)
                get { this.getJsonArray("someArray").getValuesAs(TextNode::class.java).map { it.value } }.containsExactly("foo", "bar")
                get { this.getJsonObject("someNested") }.and {
                    get { this.getString("name") }.isEqualTo("foo")
                    get { this.getInt("someInt") }.isEqualTo(3)
                }
            }
        }

        val rewrittenBytes = BsonSerializer.serializeBsonDocument(node)
        expectThat(rewrittenBytes.hex()).isEqualTo(exampleBson.hex())
    }

    @Test
    fun testExtractFields() {
        expectThat(BsonDeserializer.extractBsonNode(exampleBson, listOf(), trustSizeMarkers = false))
            .isA<DocumentNode>().get { this.getInt("someInt") }.isEqualTo(3)

        expectThat(BsonDeserializer.extractBsonNode(exampleBson, listOf("name"), trustSizeMarkers = false))
            .isA<TextNode>().get { this.value }.isEqualTo("foo")
        expectThat(BsonDeserializer.extractBsonNode(exampleBson, listOf("someInt"), trustSizeMarkers = false))
            .isA<Int32Node>().get { this.value }.isEqualTo(3)
        expectThat(BsonDeserializer.extractBsonNode(exampleBson, listOf("someFloat"), trustSizeMarkers = false))
            .isA<DoubleNode>().get { this.value }.isEqualTo(42.3)
        expectThat(BsonDeserializer.extractBsonNode(exampleBson, listOf("someNested", "name"), trustSizeMarkers = false))
            .isA<TextNode>().get { this.value }.isEqualTo("foo")
        expectThat(BsonDeserializer.extractBsonNode(exampleBson, listOf("someNested", "someInt"), trustSizeMarkers = false))
            .isA<Int32Node>().get { this.value }.isEqualTo(3)
        expectThat(BsonDeserializer.extractBsonNode(exampleBson, listOf("someArray", "0"), trustSizeMarkers = false))
            .isA<TextNode>().get { this.value }.isEqualTo("foo")
        expectThat(BsonDeserializer.extractBsonNode(exampleBson, listOf("someArray", "1"), trustSizeMarkers = false))
            .isA<TextNode>().get { this.value }.isEqualTo("bar")

        expectThat(BsonDeserializer.extractBsonNode(exampleBson, listOf("name"), trustSizeMarkers = true))
            .isA<TextNode>().get { this.value }.isEqualTo("foo")
        expectThat(BsonDeserializer.extractBsonNode(exampleBson, listOf("someInt"), trustSizeMarkers = true))
            .isA<Int32Node>().get { this.value }.isEqualTo(3)
        expectThat(BsonDeserializer.extractBsonNode(exampleBson, listOf("someFloat"), trustSizeMarkers = true))
            .isA<DoubleNode>().get { this.value }.isEqualTo(42.3)
        expectThat(BsonDeserializer.extractBsonNode(exampleBson, listOf("someNested", "name"), trustSizeMarkers = true))
            .isA<TextNode>().get { this.value }.isEqualTo("foo")
        expectThat(BsonDeserializer.extractBsonNode(exampleBson, listOf("someNested", "someInt"), trustSizeMarkers = true))
            .isA<Int32Node>().get { this.value }.isEqualTo(3)
        expectThat(BsonDeserializer.extractBsonNode(exampleBson, listOf("someArray", "0"), trustSizeMarkers = true))
            .isA<TextNode>().get { this.value }.isEqualTo("foo")
        expectThat(BsonDeserializer.extractBsonNode(exampleBson, listOf("someArray", "1"), trustSizeMarkers = true))
            .isA<TextNode>().get { this.value }.isEqualTo("bar")
    }

}